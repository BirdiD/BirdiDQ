{"prompt":"Check if all the order IDs in the dataset are unique\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='order_id') STOP"}
{"prompt":"Ensure that each product code is unique in the inventory\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='product_code') STOP"}
{"prompt":"Are all the customer email addresses unique?\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='customer_email') STOP"}
{"prompt":"Verify if each transaction ID is unique in the sales data\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='transaction_id') STOP"}
{"prompt":"Verify that at least 95% of the user IDs are unique\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='user_id', mostly=0.95) STOP"}
{"prompt":"Ensure that all the categories in the dataset are unique\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='category') STOP"}
{"prompt":"Check if all team names are unique among the USA teams\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='team_name', condition_parser='pandas', row_condition='country==USA') STOP"}
{"prompt":"Ensure that each product SKU is unique among the available inventory items\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='product_sku', condition_parser='pandas', row_condition='inventory_count>0') STOP"}
{"prompt":"Are all the city names unique in the dataset?\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='city') STOP"}
{"prompt":"Verify that in 80% of the cases, the event IDs are unique\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='event_id', mostly=0.8) STOP"}
{"prompt":"Ensure that all the statuses in the dataset are unique\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='status') STOP"}
{"prompt":"Check if all student IDs are unique among the 10th-grade students\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='student_id', condition_parser='pandas', row_condition='grade_level==10') STOP"}
{"prompt":"Ensure that each product name is unique among the items with a price higher than 100\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='product_name', condition_parser='pandas',  row_condition='price>100') STOP"}
{"prompt":"Are all the order dates unique in the sales dataset?\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='order_date') STOP"}
{"prompt":"Verify that in 90% of the cases, the employee IDs are unique\n\n###\n\n","completion":" expect_column_values_to_be_unique(column='employee_id', mostly=0.9) STOP"}
{"prompt":"Check if the values in the name column are not 'John', 'Jane', or 'Smith'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='name', value_set=['John', 'Jane', 'Smith']) STOP"}
{"prompt":"Ensure that the values in the age column for male gender are not 0, 100, or 200.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='age', value_set=[0, 100, 200], condition_parser='pandas', row_condition='gender==Male') STOP"}
{"prompt":"Verify that at least 99% of the values in the address column are not 'Unknown', 'NA', or 'N\/A'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='address', value_set=['Unknown', 'NA', 'N\/A'], mostly=0.99) STOP"}
{"prompt":"Check if the values in the email column are not 'test@example.com' or 'dummy@example.com'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='email', value_set=['test@example.com', 'dummy@example.com']) STOP"}
{"prompt":"Ensure that at least 75% of the values in the phone_number column are not '000-000-0000' or '111-111-1111'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='phone_number', value_set=['000-000-0000', '111-111-1111'], mostly=0.75) STOP"}
{"prompt":"Verify if the values in the description column are not 'N\/A' or 'Not available'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='description', value_set=['N\/A', 'Not available']) STOP"}
{"prompt":"Check that at least 80% of the values in the quantity column are not 0.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='quantity', value_set=[0], mostly=0.8) STOP"}
{"prompt":"Ensure that the values in the status column are not 'Pending' or 'Incomplete'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='status', value_set=['Pending', 'Incomplete']) STOP"}
{"prompt":"Verify if the values in the zipcode column are not '00000', '11111', or '99999'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='zipcode', value_set=['00000', '11111', '99999']) STOP"}
{"prompt":"Check that at least 60% of the values in the product_code column are not 'XYZ-001' or 'ABC-002'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='product_code', value_set=['XYZ-001', 'ABC-002'], mostly=0.6) STOP"}
{"prompt":"Ensure that the values in the username column are not 'admin' or 'testuser'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='username', value_set=['admin', 'testuser']) STOP"}
{"prompt":"Verify if the values in the price column are not 0.0, 10.0, or 20.0.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='price', value_set=[0.0, 10.0, 20.0]) STOP"}
{"prompt":"Check that at least 90% of the values in the rating column are not 1, 2, or 3.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='rating', value_set=[1, 2, 3], mostly=0.9) STOP"}
{"prompt":"Ensure that the values in the temperature column are not -10, 0, or 10.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='temperature', value_set=[-10, 0, 10]) STOP"}
{"prompt":"Verify if the values in the sales column are not 0, 100, or 1000.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='sales', value_set=[0, 100, 1000]) STOP"}
{"prompt":"Check that at least 70% of the values in the category column are not 'Uncategorized' or 'Other'.\n\n###\n\n","completion":" expect_column_values_to_not_be_in_set(column='category', value_set=['Uncategorized', 'Other'], mostly=0.7) STOP"}
{"prompt":"Check if all values in the expiration_date column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='expiration_date') STOP"}
{"prompt":"Ensure that at least 90% of the values in the middle_name column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='middle_name', mostly=0.9) STOP"}
{"prompt":"Verify if all values in the comments column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='comments') STOP"}
{"prompt":"Check that in 80% of the cases, the values in the phone_number column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='phone_number', mostly=0.8) STOP"}
{"prompt":"Ensure that all values in the start_time column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='start_time') STOP"}
{"prompt":"Verify that at least 95% of the values in the notes column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='notes', mostly=0.95) STOP"}
{"prompt":"Check if all values in the address column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='address') STOP"}
{"prompt":"Ensure that at least 75% of the values in the email column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='email', mostly=0.75) STOP"}
{"prompt":"Verify if all values in the status column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='status') STOP"}
{"prompt":"Check that in 85% of the cases, the values in the salary column are null.\n\n###\n\n","completion":" expect_column_values_to_be_null(column='salary', mostly=0.85) STOP"}
{"prompt":"Check if the column age exists in the customer data\n\n###\n\n","completion":" expect_column_to_exist(column='age') STOP"}
{"prompt":"Ensure that the column product_name is present in the table\n\n###\n\n","completion":" expect_column_to_exist(column='product_name') STOP"}
{"prompt":"Is the column timestamp available in the dataset?\n\n###\n\n","completion":" expect_column_to_exist(column='timestamp') STOP"}
{"prompt":"Make sure the column email_address is included in the user information\n\n###\n\n","completion":" expect_column_to_exist(column='email_address') STOP"}
{"prompt":"Verify if the column customer_id exists in the sales data\n\n###\n\n","completion":" expect_column_to_exist(column='customer_id') STOP"}
{"prompt":"Check if the column order_date exists in the sales dataset\n\n###\n\n","completion":" expect_column_to_exist(column='order_date') STOP"}
{"prompt":"Ensure that the column quantity is present in the inventory data\n\n###\n\n","completion":" expect_column_to_exist(column='quantity') STOP"}
{"prompt":"Is the column customer_name available in the customer information?\n\n###\n\n","completion":" expect_column_to_exist(column='customer_name') STOP"}
{"prompt":"Make sure the column payment_method is included in the transaction data\n\n###\n\n","completion":" expect_column_to_exist(column='payment_method') STOP"}
{"prompt":"Verify if the column product_id exists in the product catalog\n\n###\n\n","completion":" expect_column_to_exist(column='product_id') STOP"}
{"prompt":"Check if the column rating exists in the review dataset\n\n###\n\n","completion":" expect_column_to_exist(column='rating') STOP"}
{"prompt":"Ensure that the column address is present in the user profile\n\n###\n\n","completion":" expect_column_to_exist(column='address') STOP"}
{"prompt":"Is the column quantity_sold available in the sales report?\n\n###\n\n","completion":" expect_column_to_exist(column='quantity_sold') STOP"}
{"prompt":"Make sure the column category is included in the product data\n\n###\n\n","completion":" expect_column_to_exist(column='category') STOP"}
{"prompt":"Verify if the column team_name exists in the sports dataset\n\n###\n\n","completion":" expect_column_to_exist(column='team_name') STOP"}
{"prompt":"Check if column_name contains the following values: value1, value2, and value3\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='column_name', value_set=['value1', 'value2', 'value3']) STOP"}
{"prompt":"Check if the values in the category column belong to the set ['electronics', 'furniture', 'clothing']\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='category', value_set=['electronics', 'furniture', 'clothing']) STOP"}
{"prompt":"Verify if the country column consists of values USA, Canada and Mexico\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='country', value_set=['USA', 'Canada', 'Mexico']) STOP"}
{"prompt":"Is the gender column limited to the values ['male', 'female']\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='gender', value_set=['male', 'female']) STOP"}
{"prompt":"Make sure the payment_method column only contains the values : credit_card', paypal, bank_transfer\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='payment_method', value_set=['electronics', 'furniture', 'clothing']) STOP"}
{"prompt":"Verify if at least 90% of the values in the rating column belong to the set [1, 2, 3, 4, 5]\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='rating', value_set=[1, 2, 3, 4, 5], mostly=0.9) STOP"}
{"prompt":"Check if the type column for French users contains the following values: member and admin.\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='type', value_set=['member', 'admin'], condition_parser='pandas', row_condition='countryCode==FR') STOP"}
{"prompt":"Ensure that the category column contains the values ['cat', 'dog'] only for rows where the price column is greater than 100.\n\n###\n\n","completion":" expect_column_values_to_be_in_set(column='category', value_set=['cat', 'dog'], condition_parser='pandas', row_condition='price>=100') STOP"}
{"prompt":"Verify if at least 80% of the values in the email column are valid email addresses\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='email', regex=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$', mostly = 0.8) STOP"}
{"prompt":"Ensure that the values in the phone_number column follow the format XXX-XXX-XXXX, but only for rows where the country column is set to USA.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='phone_number', regex_pattern='^\\d{3}-\\d{3}-\\d{4}$', condition_parser='pandas', row_condition='country==USA') STOP"}
{"prompt":"Check if the values in the zipcode column consist of exactly 5 digits.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='zipcode', regex_pattern='^\\d{5}$') STOP"}
{"prompt":"Verify if the values in the product_code column follow the pattern ABC-123.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='product_code', regex_pattern='^[A-Z]{3}-\\d{3}$') STOP"}
{"prompt":"Ensure that at least half of the values in the username column have the format abc_12.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='username', regex_pattern='^[a-z]{3}_\\d{2}$', mostly=0.50) STOP"}
{"prompt":"Check that the values in the website column match the pattern for a valid URL.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='website', regex='^(http|https):\/\/[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+([\/?].*)?$') STOP"}
{"prompt":"Verify if the values in the date column follow the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='date', regex='^\\d{4}-\\d{2}-\\d{2}$') STOP"}
{"prompt":"Ensure that the values in the employee_id column have the pattern ABC-1234.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='employee_id', regex='^[A-Z]{3}-\\d{4}$') STOP"}
{"prompt":"Check if the values in the code column consist of alphanumeric characters and hyphens.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='code', regex='^[\\w-]+$') STOP"}
{"prompt":"Verify that the values in the currency column match the pattern for a three-letter currency code.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='currency', regex='^[A-Z]{3}$') STOP"}
{"prompt":"Ensure that the values in the username column contain only alphanumeric characters, underscores, periods, and hyphens.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='username', regex='^[a-zA-Z0-9_.-]+$') STOP"}
{"prompt":"Check if the values in the isbn column follow the pattern for a valid ISBN number.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='isbn', regex='^(978|979)-\\d{10}$') STOP"}
{"prompt":"Verify that, in 75% of cases, the values in the description column consist of only alphabetic characters and spaces.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='description', regex='^[A-Za-z\\s]+$', mostly=0.75) STOP"}
{"prompt":"Ensure that the values in the ip_address column match the pattern for a valid IP address.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='ip_address', regex='^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$') STOP"}
{"prompt":"Check if the values in the account_number column consist of exactly 10 digits.\n\n###\n\n","completion":" expect_column_values_to_match_regex(column='account_number', regex='^\\d{10}$') STOP"}
{"prompt":"Check that none of the values in the name column match the pattern for alphabetic characters and spaces.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex(column='name', regex='^[A-Za-z\\s]+$') STOP"}
{"prompt":"Verify that none of the values in the email column match the pattern for a valid email address.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex(column='email', regex='^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$') STOP"}
{"prompt":"Ensure that none of the values in the phone_number column match the pattern for a phone number in the format xxx-xxx-xxxx.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex(column='phone_number', regex='^\\d{3}-\\d{3}-\\d{4}$') STOP"}
{"prompt":"Check that none of the values in the address column match the pattern for an address starting with a digit.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex(column='address', regex='^(?!\\d)\\w+(\\s\\w+){1,2}$') STOP"}
{"prompt":"Verify if none of the values in the zipcode column match the pattern for a five-digit zip code.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex(column='zipcode', regex='^\\d{5}$') STOP"}
{"prompt":"Check that none of the values in the revenue column match the patterns for five digits or three uppercase letters.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex_list(column='revenue', regex_list=['\\d{5}', '[A-Z]{3}']) STOP"}
{"prompt":"Verify if, in 90% cases, none of the values in the quantity column match the patterns for lowercase letters or three digits.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex_list(column='quantity', regex_list=['[a-z]+', '\\d{3}'], mostly=0.9) STOP"}
{"prompt":"Ensure that, for rows where the country is 'USA', none of the values in the sales column match the patterns for four digits or only letters.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex_list(column='sales', regex_list=['[0-9]{4}', '^[a-zA-Z]+$'], condition_parser='pandas',  row_condition='country==USA') STOP"}
{"prompt":"Check if none of the values in the temperature column match the patterns for uppercase letters or four digits.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex_list(column='temperature', regex_list=['[A-Z]+', '\\d{4}']) STOP"}
{"prompt":"Verify that, in 80% cases, none of the values in the rating column match the patterns for special characters or two digits.\n\n###\n\n","completion":" expect_column_values_to_not_match_regex_list(column='rating', regex_list=['[!@#$%^&*]', '[0-9]{2}'], mostly=0.8) STOP"}
{"prompt":"Check if the values in the name column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='name') STOP"}
{"prompt":"Ensure that the values in the age column are not null and not empty, but only for rows where the gender column is set to 'Male'.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='age', condition_parser='pandas', row_condition='gender==Male') STOP"}
{"prompt":"Verify that at least 99% of the values in the address column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='address', mostly=0.99) STOP"}
{"prompt":"Check if the values in the email column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='email') STOP"}
{"prompt":"Ensure that at least 75% of the values in the phone_number column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='phone_number', mostly=0.75) STOP"}
{"prompt":"Verify if the values in the description column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='description') STOP"}
{"prompt":"Check that at least 80% of the values in the quantity column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='quantity', mostly=0.8) STOP"}
{"prompt":"Ensure that the values in the status column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='status') STOP"}
{"prompt":"Verify if the values in the zipcode column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='zipcode') STOP"}
{"prompt":"Check that at least 60% of the values in the product_code column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='product_code', mostly=0.6) STOP"}
{"prompt":"Ensure that the values in the username column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='username') STOP"}
{"prompt":"Verify if the values in the price column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='price') STOP"}
{"prompt":"Check that at least 90% of the values in the rating column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='rating', mostly=0.9) STOP"}
{"prompt":"Ensure that the values in the temperature column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='temperature') STOP"}
{"prompt":"Verify if the values in the sales column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='sales') STOP"}
{"prompt":"Check that at least 70% of the values in the category column are not null and not empty.\n\n###\n\n","completion":" expect_column_values_to_not_be_null_and_column_to_not_be_empty(column='category', mostly=0.7) STOP"}
{"prompt":"Check if the values in the name column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='name') STOP"}
{"prompt":"Ensure that the values in the age column are not null, but only for rows where the gender column is set to 'Male'.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='age', condition_parser='pandas', row_condition='gender==Male') STOP"}
{"prompt":"Verify that at least 99% of the values in the address column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='address', mostly=0.99) STOP"}
{"prompt":"Check if the values in the email column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='email') STOP"}
{"prompt":"Ensure that at least 75% of the values in the phone_number column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='phone_number', mostly=0.75) STOP"}
{"prompt":"Check if the values in the title column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='title') STOP"}
{"prompt":"Ensure that the values in the quantity column are not null, but only for rows where the status column is set to 'In Stock'.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='quantity', condition_parser='pandas', row_condition='status==In Stock') STOP"}
{"prompt":"Verify that at least 95% of the values in the price column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='price', mostly=0.95) STOP"}
{"prompt":"Check if the values in the description column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='description') STOP"}
{"prompt":"Ensure that at least 80% of the values in the country column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='country', mostly=0.80) STOP"}
{"prompt":"Check if the values in the start_date column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='start_date') STOP"}
{"prompt":"Ensure that the values in the zipcode column are not null, but only for rows where the state column is set to 'California'.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='zipcode', condition_parser='pandas', row_condition='state==California') STOP"}
{"prompt":"Verify that at least 70% of the values in the rating column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='rating', mostly=0.70) STOP"}
{"prompt":"Ensure that at least 85% of the values in the phone_number column are not null.\n\n###\n\n","completion":" expect_column_values_to_not_be_null(column='phone_number', mostly=0.85) STOP"}
{"prompt":"Check if the values in the date column match the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='date', strftime_format='%Y-%m-%d') STOP"}
{"prompt":"Ensure that the values in the timestamp column follow the format YYYY-MM-DD HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='timestamp', strftime_format='%Y-%m-%d %H:%M:%S') STOP"}
{"prompt":"Verify that at least 95% of the values in the created_at column adhere to the format YYYY-MM-DD HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='created_at', strftime_format='%Y-%m-%d %H:%M:%S', mostly=0.95) STOP"}
{"prompt":"Check if the values in the time column match the format HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='time', strftime_format='%H:%M:%S') STOP"}
{"prompt":"Ensure that the values in the start_date column follow the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='start_date', strftime_format='%Y-%m-%d') STOP"}
{"prompt":"Check if the values in the due_date column match the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='due_date', strftime_format='%Y-%m-%d') STOP"}
{"prompt":"Verify that at least 90% of the values in the updated_at column adhere to the format YYYY-MM-DD HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='updated_at', strftime_format='%Y-%m-%d %H:%M:%S', mostly=0.9) STOP"}
{"prompt":"Check if the values in the event_time column match the format HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='event_time', strftime_format='%H:%M:%S') STOP"}
{"prompt":"Ensure that at least 80% of the values in the birthdate column follow the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='birthdate', strftime_format='%Y-%m-%d', mostly=0.8) STOP"}
{"prompt":"Check if the values in the log_date column match the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='log_date', strftime_format='%Y-%m-%d') STOP"}
{"prompt":"Verify if the values in the meeting_time column adhere to the format HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='meeting_time', strftime_format='%H:%M:%S') STOP"}
{"prompt":"Ensure that at least 85% of the values in the reservation_date column follow the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='reservation_date', strftime_format='%Y-%m-%d', mostly=0.85) STOP"}
{"prompt":"Check if the values in the timestamp_utc column match the format YYYY-MM-DD HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='timestamp_utc', strftime_format='%Y-%m-%d %H:%M:%S') STOP"}
{"prompt":"Verify if the values in the shift_start column adhere to the format HH:MM:SS.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='shift_start', strftime_format='%H:%M:%S') STOP"}
{"prompt":"Ensure that the values in the purchase_date column follow the format YYYY-MM-DD.\n\n###\n\n","completion":" expect_column_values_to_match_strftime_format(column='purchase_date', strftime_format='%Y-%m-%d') STOP"}
{"prompt":"Verify if the values in the rank column are between 0 and 100\n\n###\n\n","completion":" expect_column_values_to_be_between(column='rank', min_value=0, max_value=100) STOP"}
{"prompt":"Ensure that the values in the temperature column fall within the range of -10 to 40\n\n###\n\n","completion":" expect_column_values_to_be_between(column='temperature', min_value=-10, max_value=40) STOP"}
{"prompt":"Check that at least 30% of the values in the sales column are between 1000 and 10000\n\n###\n\n","completion":" expect_column_values_to_be_between(column='sales', min_value=1000, max_value=10000, mostly=0.3) STOP"}
{"prompt":"Verify if the values in the score column for nba players are within the range of 0 to 1\n\n###\n\n","completion":" expect_column_values_to_be_between(column='score', min_value=0, max_value=1, condition_parser='pandas', row_condition='players==nba') STOP"}
{"prompt":"Verify if the values in the quantity column are between 0 and 100.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='quantity', min_value=0, max_value=100) STOP"}
{"prompt":"Ensure that the values in the price column fall within the range of 0.01 to 100.0.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='price', min_value=0.01, max_value=100.0) STOP"}
{"prompt":"Check that at least 80% of the values in the age column are between 18 and 65.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='age', min_value=18, max_value=65, mostly=0.8) STOP"}
{"prompt":"Verify if the values in the rating column are within the range of 1 to 5.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='rating', min_value=1, max_value=5) STOP"}
{"prompt":"Ensure that the values in the temperature column fall within the range of -20 to 50.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='temperature', min_value=-20, max_value=50) STOP"}
{"prompt":"Check that at least 50% of the values in the sales column are between 500 and 10000.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='sales', min_value=500, max_value=10000, mostly=0.5) STOP"}
{"prompt":"Verify if the values in the quantity column for electronics items are between 0 and 100.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='quantity', min_value=0, max_value=100, condition_parser='pandas', row_condition='category==Electronics') STOP"}
{"prompt":"Ensure that the values in the price column fall within the range of 1.0 to 1000.0.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='price', min_value=1.0, max_value=1000.0) STOP"}
{"prompt":"Check that at least 70% of the values in the age column are between 21 and 50.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='age', min_value=21, max_value=50, mostly=0.7) STOP"}
{"prompt":"Verify if the values in the rating column are within the range of 0 to 10.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='rating', min_value=0, max_value=10) STOP"}
{"prompt":"Ensure that the values in the temperature column fall within the range of -10 to 30.\n\n###\n\n","completion":" expect_column_values_to_be_between(column='temperature', min_value=-10, max_value=30) STOP"}
{"prompt":"Ensure that the minimum value in the revenue, for FR users, falls within the range of 0 to 100000\n\n###\n\n","completion":" expect_column_min_to_be_between(column='revenue', min_value=0, max_value=100000, condition_parser='pandas',  row_condition='country==FR') STOP"}
{"prompt":"Verify if the minimum value in the rank column is between 0 and 36\n\n###\n\n","completion":" expect_column_min_to_be_between(column='rank', min_value=0, max_value=36) STOP"}
{"prompt":"Verify if the minimum value in the temperature column is between 0 and 60 degres\n\n###\n\n","completion":" expect_column_min_to_be_between(column='temperature', min_value=0, max_value=60) STOP"}
{"prompt":"Check that at least 30% of sales have a minimum that falls between 87 and 150000\n\n###\n\n","completion":" expect_column_min_to_be_between(column='sales', min_value=87, max_value=150000, mostly=0.3) STOP"}
{"prompt":"Ensure that the maximum goals scored by bar\u00e7a team, falls within the range of 17 to 21\n\n###\n\n","completion":" expect_column_max_to_be_between(column='goals', min_value=17, max_value=21, condition_parser='pandas',  row_condition='team==bar\u00e7a') STOP"}
{"prompt":"Verify if the maximum value in the rank column is between 12 and 90\n\n###\n\n","completion":" expect_column_max_to_be_between(column='rank', min_value=12, max_value=90) STOP"}
{"prompt":"Check that the maximum value in the temperature column is between 25 and 75\n\n###\n\n","completion":" expect_column_max_to_be_between(column='temperature', min_value=25, max_value=75) STOP"}
{"prompt":"Run a test that checks that at least 30% of sales have a maximum that falls between 87 and 150000\n\n###\n\n","completion":" expect_column_max_to_be_between(column='sales', min_value=87, max_value=150000, mostly=0.3) STOP"}
{"prompt":"Check if the distinct values in the gender column belong to the set 'Male', 'Female', 'Other'\n\n###\n\n","completion":" expect_column_distinct_values_to_be_in_set(column='gender', value_set=['Male', 'Female', 'Other']) STOP"}
{"prompt":"Check if the distinct values in the fruit column : 'Apple', 'Banana', 'Orange'.\n\n###\n\n","completion":" expect_column_distinct_values_to_be_in_set(column='fruit', value_set=['Apple', 'Banana', 'Orange']) STOP"}
{"prompt":"Ensure that the distinct values in the country column are restricted to Senegal, Marocco and Mali\n\n###\n\n","completion":" expect_column_distinct_values_to_be_in_set(column='country', value_set=['Senegal', 'Morocco', 'Mali']) STOP"}
{"prompt":"Ensure that at least 99% of the distinct values in the team column contain one of ['Team A', 'Team B', 'Team C'].\n\n###\n\n","completion":" expect_column_distinct_values_to_contain_set(column='team', value_set=['Team A', 'Team B', 'Team C'], mostly=0.99) STOP"}
{"prompt":"Verify if the distinct values in the status column, for rows where the country column is set to GB, contain at least one value fo the following value: 'Active', 'Inactive'.\n\n###\n\n","completion":" expect_column_distinct_values_to_contain_set(column='status', value_set=['Active', 'Inactive'], condition_parser='pandas', row_condition='country==GB') STOP"}
{"prompt":"Check if the distinct values in the product column include one of ['Laptop', 'Phone', 'Tablet'].\n\n###\n\n","completion":" expect_column_distinct_values_to_contain_set(column='product', value_set=['Laptop', 'Phone', 'Tablet']) STOP"}
{"prompt":"Ensure that at least 95% of the distinct values in the city column include one of ['New York', 'Los Angeles', 'Chicago']\n\n###\n\n","completion":" expect_column_distinct_values_to_contain_set(column='city', value_set=['New York', 'Los Angeles', 'Chicago'], mostly=0.95) STOP"}
{"prompt":"Ensure that the distinct values in the usertype column are limited to : 'members' and 'guest' only\n\n###\n\n","completion":" expect_column_distinct_values_to_equal_set(column='usertype', value_set=['members', 'guest']) STOP"}
{"prompt":"Check if the distinct values in the fruit column exactly match the set ['Apple', 'Banana', 'Orange'].\n\n###\n\n","completion":" expect_column_distinct_values_to_equal_set(column='fruit', value_set=['Apple', 'Banana', 'Orange']) STOP"}
{"prompt":"Verify that at least 95% of the distinct values in the status column match the set ['Active', 'Inactive', 'Pending'].\n\n###\n\n","completion":" expect_column_distinct_values_to_equal_set(column='status', value_set=['Active', 'Inactive', 'Pending'], mostly=0.91) STOP"}
{"prompt":"Ensure that the distinct values in the category for TSP library are limited to: 'Electronics', 'Clothing', 'Home', and 'Books' only.\n\n###\n\n","completion":" expect_column_distinct_values_to_equal_set(column='category', value_set=['Electronics', 'Clothing', 'Home', 'Books'], condition_parser='pandas', row_condition='library==TSP') STOP"}
{"prompt":"Can you verify that the mean subscrptionprice falls within the range of 2000 to 5000 for recurrent subscriptiontype ?\n\n###\n\n","completion":" expect_column_mean_to_be_between(column='subscriptionprice', min_value=2000, max_value=5000, condition_parser='pandas',  row_condition='subscriptiontype==recurrent') STOP"}
{"prompt":"Verify if the mean value of orderprice is between 0 and 50\n\n###\n\n","completion":" expect_column_mean_to_be_between(column='orderprice', min_value=0, max_value=50) STOP"}
{"prompt":"Check that the mean value in the temperature column is between 25 and 75\n\n###\n\n","completion":" expect_column_mean_to_be_between(column='temperature', min_value=25, max_value=75) STOP"}
{"prompt":"Tell me if at least 95% of the time, the mean value in the duration column falls between 0 and 3600\n\n###\n\n","completion":" expect_column_mean_to_be_between(column='duration', min_value=0, max_value=3600, mostly=0.95) STOP"}
{"prompt":"Is it true that 90% of time, the mean sales value is between 1000 and 10000 ? Run a check to verify\n\n###\n\n","completion":" expect_column_mean_to_be_between(column='sales', min_value=1000, max_value=10000, mostly=0.9) STOP"}
{"prompt":"Is the median value in the temperature column between 18 and 25 degrees?\n\n###\n\n","completion":" expect_column_median_to_be_between(column='temperature', min_value=18, max_value=25) STOP"}
{"prompt":"Are the majority of sales' median values between 500 and 5000?\n\n###\n\n","completion":" expect_column_median_to_be_between(column='sales', min_value=500, max_value=5000, mostly=0.8) STOP"}
{"prompt":"Does the median value of revenue, for records where the country is USA, fall within 0 to 50000?\n\n###\n\n","completion":" expect_column_median_to_be_between(column='revenue', min_value=0, max_value=50000, condition_parser='pandas',  row_condition='country==USA') STOP"}
{"prompt":"Is the median value of duration between 0 and 3600 seconds?\n\n###\n\n","completion":" expect_column_median_to_be_between(column='duration', min_value=0, max_value=3600) STOP"}
{"prompt":"Are at least 90% of the medians for prices within the range of 0 to 100?\n\n###\n\n","completion":" expect_column_median_to_be_between(column='price', min_value=0, max_value=100, mostly=0.9) STOP"}
{"prompt":"Verify if standard deviation of the prediction column is between 3 and 10\n\n###\n\n","completion":" expect_column_stdev_to_be_between(column='prediction', min_value=3, max_value=10) STOP"}
{"prompt":"Does the standard deviation of PPXS rawmeterial prediction falls within 50 to 150?\n\n###\n\n","completion":" expect_column_stdev_to_be_between(column='prediction', min_value=50, max_value=150,  condition_parser='pandas',  row_condition='rawmaterial==PPXS') STOP"}
{"prompt":"Are at least 95% of the standard deviations for prices within the range of 0 to 10?\n\n###\n\n","completion":" expect_column_stdev_to_be_between(column='price', min_value=0, max_value=10, mostly=0.95) STOP"}
{"prompt":"Is the most common value in mycol one of the following: A, B, C?\n\n###\n\n","completion":" expect_column_most_common_value_to_be_in_set(column='mycol', value_set=['A', 'B', 'C']) STOP"}
{"prompt":"In most cases, does the most common value in the fruit column belong to apple, banana, or orange?\n\n###\n\n","completion":" expect_column_most_common_value_to_be_in_set(column='fruit', value_set=['apple', 'banana', 'orange'], mostly=0.8) STOP"}
{"prompt":"When the city is Paris, is the most common value of status either active or inactive?\n\n###\n\n","completion":" expect_column_most_common_value_to_be_in_set(column='status', value_set=['active', 'inactive'], condition_parser='pandas', row_condition='city==Paris') STOP"}
{"prompt":"Is the most frequently occurring value in the product column one of the following: product1, product2, product3?\n\n###\n\n","completion":" expect_column_most_common_value_to_be_in_set(column='product', value_set=['product1', 'product2', 'product3']) STOP"}
{"prompt":"In the majority of cases, is the most common value in the type column among type1, type2, and type3\n\n###\n\n","completion":" expect_column_most_common_value_to_be_in_set(column='type', value_set=['type1', 'type2', 'type3'], mostly=0.9) STOP"}
{"prompt":"Can you verify that the most common value in total_order falls within the range of 2000 to 5000 for single ordertype?\n\n###\n\n","completion":" expect_column_most_common_value_to_be_in_set(column='total_order', value_set=[2000, 5000], condition_parser='pandas',  row_condition='ordertype==single') STOP"}
{"prompt":"Check that the values in the price column are greater than the corresponding values in the cost column.\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='price', column_B='cost') STOP"}
{"prompt":"Verify that at least 89% of the time, the values in the price column are greater than the corresponding values in the cost column.\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='price', column_B='cost', mostly=0.89) STOP"}
{"prompt":"Verify if the values in the revenue column are consistently higher than the values in the expenses column.\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='revenue', column_B='expenses') STOP"}
{"prompt":"Are the values in the revenue column most of the time (95%) consistently higher than the values in the expenses column ?\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='revenue', column_B='expenses', mostly=0.95) STOP"}
{"prompt":"Check if for at least 97% of the time, the values in the sales column are consistently higher than the values in the expenses column for card paymentMethod.\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='sales', column_B='expenses', mostly=0.97, condition_parser='pandas',  row_condition='paymentMethod==card') STOP"}
{"prompt":"Ensure that the values score are always greater than the values in the threshold column.\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='score', column_B='threshold') STOP"}
{"prompt":"Are all the values in the quantity column greater than the corresponding values in the minimum column?\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='quantity', column_B='minimum') STOP"}
{"prompt":"Is it true that all values in the value column are higher than the values in the reference column?\n\n###\n\n","completion":" expect_column_pair_values_a_to_be_greater_than_b(column_A='value', column_B='reference') STOP"}
{"prompt":"Verify if the values in the quantity column are equal to the corresponding values in the total_quantity column.\n\n###\n\n","completion":" expect_column_pair_values_to_be_equal(column_A='quantity', column_B='total_quantity') STOP"}
{"prompt":"Ensure that, in 90% cases, the values in the revenue column are equal to the values in the profit column.\n\n###\n\n","completion":" expect_column_pair_values_to_be_equal(column_A='revenue', column_B='profit', mostly=0.9) STOP"}
{"prompt":"Check if, for rows where the country is USA, the values in the status column are equal to the values in the final_status column.\n\n###\n\n","completion":" expect_column_pair_values_to_be_equal(column_A='status', column_B='final_status', condition_parser='pandas',  row_condition='country==USA') STOP"}
{"prompt":"Are the values in the rating column equal to the corresponding values in the average_rating column?\n\n###\n\n","completion":" expect_column_pair_values_to_be_equal(column_A='rating', column_B='average_rating') STOP"}
{"prompt":"Verify that, for at least 95% of the cases, the values in the value column are equal to the values in the reference column.\n\n###\n\n","completion":" expect_column_pair_values_to_be_equal(column_A='value', column_B='reference', mostly=0.95) STOP"}
{"prompt":"Verify if the values in the category column are within the set of values ['A', 'B', 'C'], and correspondingly, the values in the subcategory column are also within the same set.\n\n###\n\n","completion":" expect_column_pair_values_to_be_in_set(column_A='category', column_B='subcategory', value_set=['A', 'B', 'C']) STOP"}
{"prompt":"Ensure that, in 80% cases, both the values in the fruit column and the values in the color column belong to the set ['apple', 'banana', 'orange'].\n\n###\n\n","completion":" expect_column_pair_values_to_be_in_set(column_A='fruit', column_B='color', value_set=['apple', 'banana', 'orange'], mostly=0.8) STOP"}
{"prompt":"Check if, for rows where the country is USA both the values in the status column and the values in the final_status column are either 'active' or 'inactive'.\n\n###\n\n","completion":" expect_column_pair_values_to_be_in_set(column_A='status', column_B='final_status', value_set=['active', 'inactive'],condition_parser='pandas', row_condition='country==USA') STOP"}
{"prompt":"Verify that both the values in the product_type column and the values in the sub_type column are among the set ['type1', 'type2', 'type3'].\n\n###\n\n","completion":" expect_column_pair_values_to_be_in_set(column_A='product_type', column_B='sub_type', value_set=['type1', 'type2', 'type3']) STOP"}
{"prompt":"Ensure that, in the majority of cases, both the values in the type column and the values in the category column belong to the set ['T1', 'T2', 'T3'].\n\n###\n\n","completion":" expect_column_pair_values_to_be_in_set(column_A='type', column_B='category', value_set=['T1', 'T2', 'T3'], mostly=0.9) STOP"}
{"prompt":"Check if the proportion of unique values in the region column falls between 70% and 90%.\n\n###\n\n","completion":" expect_column_proportion_of_unique_values_to_be_between(column='region', min_value=0.7, max_value=0.9) STOP"}
{"prompt":"Verify that, in most cases, the proportion of unique values in the category column is between 50% and 80%\n\n###\n\n","completion":" expect_column_proportion_of_unique_values_to_be_between(column='category', min_value=0.5, max_value=0.6, mostly=0.9) STOP"}
{"prompt":"Ensure that MIT University graduate proportion of unique values is within 90% and 100%.\n\n###\n\n","completion":" expect_column_proportion_of_unique_values_to_be_between(column='graduate', min_value=0.9, max_value=1.0, condition_parser='pandas',  row_condition='University==MIT') STOP"}
{"prompt":"Ensure that, for rows where the sucess column is True, the proportion of unique values in the status column is within 60% and 80%.\n\n###\n\n","completion":" expect_column_proportion_of_unique_values_to_be_between(column='status', min_value=0.6, max_value=0.8, condition_parser='pandas',  row_condition='success==True') STOP"}
{"prompt":"Is the proportion of unique values in the rating column between 80% and 100%?\n\n###\n\n","completion":" expect_column_proportion_of_unique_values_to_be_between(column='rating', min_value=0.8, max_value=1.0) STOP"}
{"prompt":"Check that, in 85% cases, the proportion of unique values in the type column falls within 60% and 80%.\n\n###\n\n","completion":" expect_column_proportion_of_unique_values_to_be_between(column='type', min_value=0.6, max_value=0.8, mostly=0.85) STOP"}
{"prompt":"Check if the values in the price column between the 25th and 75th percentiles are within the ranges of 10-30 and 100-150.\n\n###\n\n","completion":" expect_column_quantile_values_to_be_between(column='price', quantile_ranges={'quantiles': [0.25, 0.75], 'value_ranges': [[10, 100], [30, 150]]}) STOP"}
{"prompt":"Verify that, in most cases (95%), the values in the temperature column between the 10th and 90th percentiles fall within the ranges of -10-80 and 0-100.\n\n###\n\n","completion":" expect_column_quantile_values_to_be_between(column='temperature', quantile_ranges={'quantiles': [0.1, 0.9], 'value_ranges': [[-10, 0], [80, 100]]}, mostly=0.95) STOP"}
{"prompt":"Ensure that within Ecommerce Department the values in the sales column between the 50th and 75th percentiles are within the ranges of 1000-2000 and 5000-8000.\n\n###\n\n","completion":" expect_column_quantile_values_to_be_between(column='sales', quantile_ranges={'quantiles': [0.5, 0.75], 'value_ranges': [[1000, 5000], [2000, 8000]]}, condition_parser='pandas', row_condition='Department==Ecommerce') STOP"}
{"prompt":"Are the values in the revenue column between the 10th and 90th percentiles within the ranges of 10000-30000 and 20000-40000?\n\n###\n\n","completion":" expect_column_quantile_values_to_be_between(column='revenue', quantile_ranges={'quantiles': [0.1, 0.9], 'value_ranges': [[10000, 20000], [30000, 40000]]}) STOP"}
{"prompt":"Check that, in 90% cases, the values in the rating column between the 25th and 75th percentiles fall within the ranges of 1-4 and 2-5.\n\n###\n\n","completion":" expect_column_quantile_values_to_be_between(column='rating', quantile_ranges={'quantiles': [0.25, 0.75], 'value_ranges': [[1, 2], [4, 5]]}, mostly=0.9) STOP"}
{"prompt":"Check that the sum of values in the revenue column is between 100000 and 200000.\n\n###\n\n","completion":" expect_column_sum_to_be_between(column='revenue', min_value=100000, max_value=200000) STOP"}
{"prompt":"Verify if, in 45% cases, the sum of values in the quantity column falls between 100 and 1000.\n\n###\n\n","completion":" expect_column_sum_to_be_between(column='quantity', min_value=100, max_value=1000, mostly=0.45) STOP"}
{"prompt":"Ensure that, for rows where the agentName is Dioula, the sum of values in the sales column is within the range of 50000 and 100000.\n\n###\n\n","completion":" expect_column_sum_to_be_between(column='sales', min_value=50000, max_value=100000,  condition_parser='pandas',  row_condition='agentName==Dioula') STOP"}
{"prompt":"Check if the sum of values in the temperature column is between -50 and 50.\n\n###\n\n","completion":" expect_column_sum_to_be_between(column='temperature', min_value=-50, max_value=50) STOP"}
{"prompt":"Verify that, in 80% cases, the sum of values in the rating column falls between 1 and 5.\n\n###\n\n","completion":" expect_column_sum_to_be_between(column='rating', min_value=1, max_value=5, mostly=0.8) STOP"}
{"prompt":"Check that the number of unique values in the category column is between 5 and 10.\n\n###\n\n","completion":" expect_column_unique_value_count_to_be_between(column='category', min_value=5, max_value=10) STOP"}
{"prompt":"Verify if, in 70% cases, the number of unique values in the product column falls between 100 and 1000.\n\n###\n\n","completion":" expect_column_unique_value_count_to_be_between(column='product', min_value=100, max_value=1000, mostly=0.7) STOP"}
{"prompt":"Ensure that, for rows where the country is USA the number of unique values in the status column is within the range of 2 and 5.\n\n###\n\n","completion":" expect_column_unique_value_count_to_be_between(column='status', min_value=2, max_value=5, condition_parser='pandas', row_condition='country==USA') STOP"}
{"prompt":"Check if the number of unique values in the fruit column is between 1 and 10.\n\n###\n\n","completion":" expect_column_unique_value_count_to_be_between(column='fruit', min_value=1, max_value=10) STOP"}
{"prompt":"Verify that, in 80% cases, the number of unique values in the region column falls between 3 and 7.\n\n###\n\n","completion":" expect_column_unique_value_count_to_be_between(column='region', min_value=3, max_value=7, mostly=0.8) STOP"}
{"prompt":"Check that the lengths of values in the text column are between 10 and 100 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_be_between(column='text', min_value=10, max_value=100) STOP"}
{"prompt":"Verify if, in 90% cases, the lengths of values in the description column fall between 20 and 200 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_be_between(column='description', min_value=20, max_value=200, mostly=0.9) STOP"}
{"prompt":"Check that the lengths of values in email column are between 5 and 100 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_be_between(column='email', min_value=5, max_value=100) STOP"}
{"prompt":"Ensure that, for products where the category is Electronics the lengths of values in the name column are within the range of 5 and 50 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_be_between(column='name', min_value=5, max_value=50, condition_parser='pandas', row_condition='category==Electronics') STOP"}
{"prompt":"Check if the lengths of values in the address column are between 10 and 100 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_be_between(column='address', min_value=10, max_value=100) STOP"}
{"prompt":"Verify that the lengths of values in the title column fall between 5 and 50 characters in 80 % cases.\n\n###\n\n","completion":" expect_column_value_lengths_to_be_between(column='title', min_value=5, max_value=50, mostly=0.8) STOP"}
{"prompt":"Check that the lengths of values in the name column are equal to 10 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_equal(column='name', value=10) STOP"}
{"prompt":"Are the lengths of values in the description column are equal to 50 characters in 90% cases ?.\n\n###\n\n","completion":" expect_column_value_lengths_to_equal(column='description', value=50, mostly=0.9) STOP"}
{"prompt":"Ensure that, for rows where the category is Electronics, the lengths of values in the title column are equal to 20 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_equal(column='title', value=20, condition_parser='pandas', row_condition='category==Electronics') STOP"}
{"prompt":"Check if the lengths of values in the address column are equal to 15 characters.\n\n###\n\n","completion":" expect_column_value_lengths_to_equal(column='address', value=15) STOP"}
{"prompt":"Does the lengths of values in the tagline column are equal to 30 characters in approximately 75% cases\n\n###\n\n","completion":" expect_column_value_lengths_to_equal(column='tagline', value=30, mostly=0.7) STOP"}
{"prompt":"Check that the z-scores of values in the score column are less than 2.\n\n###\n\n","completion":" expect_column_value_z_scores_to_be_less_than(column='score', threshold=2) STOP"}
{"prompt":"Verify if, in 90% cases, the z-scores of values in the temperature column are less than 1.5.\n\n###\n\n","completion":" expect_column_value_z_scores_to_be_less_than(column='temperature', threshold=1.5, mostly=0.9) STOP"}
{"prompt":"Ensure that for all USA records, the z-scores of values in the sales column are less than 1.8.\n\n###\n\n","completion":" expect_column_value_z_scores_to_be_less_than(column='sales', threshold=1.8, condition_parser='pandas', row_condition='country==USA') STOP"}
{"prompt":"Check if the z-scores of values in the price column are less than 2.\n\n###\n\n","completion":" expect_column_value_z_scores_to_be_less_than(column='price', threshold=2) STOP"}
{"prompt":"Verify that, in most cases (let's say 80%), the z-scores of values in the rating column are less than 1.2.\n\n###\n\n","completion":" expect_column_value_z_scores_to_be_less_than(column='rating', threshold=1.2, mostly=0.8) STOP"}
{"prompt":"Check if the values in the price column are in decreasing order\n\n###\n\n","completion":" expect_column_values_to_be_decreasing(column='price') STOP"}
{"prompt":"Verify that in 80% of the cases, the values in the quantity column are decreasing\n\n###\n\n","completion":" expect_column_values_to_be_decreasing(column='quantity', mostly=0.8) STOP"}
{"prompt":"Ensure that the ratings in the dataset are in a decreasing order\n\n###\n\n","completion":" expect_column_values_to_be_decreasing(column='rating') STOP"}
{"prompt":"Are the values in the timestamp column arranged in a decreasing order?\n\n###\n\n","completion":" expect_column_values_to_be_decreasing(column='timestamp') STOP"}
{"prompt":"Check if the scores are decreasing within the entries belonging to category A\n\n###\n\n","completion":" expect_column_values_to_be_decreasing(column='score', condition_parser='pandas',  row_condition='category==A') STOP"}
{"prompt":"Check if the values in the age column are in increasing order\n\n###\n\n","completion":" expect_column_values_to_be_increasing(column='age') STOP"}
{"prompt":"Verify that in 90% of the cases, the values in the sales column are increasing\n\n###\n\n","completion":" expect_column_values_to_be_increasing(column='sales', mostly=0.9) STOP"}
{"prompt":"Ensure that the values in the time column are arranged in an increasing order\n\n###\n\n","completion":" expect_column_values_to_be_increasing(column='time') STOP"}
{"prompt":"Are the ratings in the dataset arranged in an increasing order?\n\n###\n\n","completion":" expect_column_values_to_be_increasing(column='rating') STOP"}
{"prompt":"Check if the quantities are increasing within the entries belonging to category B\n\n###\n\n","completion":" expect_column_values_to_be_increasing(column='quantity', condition_parser='pandas', row_condition='category==B') STOP"}
